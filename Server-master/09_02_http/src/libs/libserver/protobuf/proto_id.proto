syntax = "proto3";

package Proto;

enum MsgId {

	// proto3的枚举，第一个必为0
	None = 0; 

	MI_NetworkConnect			= 1;	// 请求连接
	MI_NetworkConnected			= 2;	// 连接成功

	MI_NetworkListen			= 3;	// 网络监听到一个连接
	MI_NetworkListenKey			= 4;	// 对网络监听进行一个Key值描述

	/*
	* 物理网络的断开，network通知上层网络关闭事件
	* 关闭可能是监听，可能是连接，根据协议体数据而定
	*/
	MI_NetworkDisconnect		= 10;
	MI_NetworkDisconnectEx		= 11;

	/*
	* 逻辑层的断开，上层逻辑发起的主动断开网络的协议 to network
	* 该协议没有协议体
	*/
	MI_NetworkRequestDisconnect	= 20;	// 逻辑层要求断开网络

	MI_RemoveComponent			= 50;	// remove Component
	MI_CreateComponent			= 51;	// 创建Component

	MI_Ping						= 101;
	MI_AppInfoSync				= 103;  // app 数据同步

	// 登录
	C2L_AccountCheck					= 1001;  // 1.验证账号：client to login
	C2L_AccountCheckRs					= 1002;  //   AccountCheckRs to client

	MI_AccountQueryOnlineToRedis		= 1003;  // 2.验证账号：验证账号之前，向Redis询问是已在其他的Login登录验证账号
	MI_AccountQueryOnlineToRedisRs		= 1004;

	L2DB_QueryPlayerList				= 1010;  // 
	L2DB_QueryPlayerListRs				= 1011;  //   

	G2DB_QueryPlayer				= 1101;  // 1.选择角色 
	G2DB_QueryPlayerRs				= 1102;  //   PlayerListToDBRs

	L2C_PlayerList                  = 1103;  // 2.选择角色：PlayerListToClient

	C2L_CreatePlayer				= 1105;  // 3.选择角色：没有角色，请求创建角色
	C2L_CreatePlayerRs				= 1106;  //   CreatePlayerRs to client

	L2DB_CreatePlayer			    = 1107;  // 4.选择角色：创建角色ToDB
	L2DB_CreatePlayerRs             = 1108;  //   CreatePlayerToDB

	G2DB_SavePlayer					= 1800;

	// robot
	MI_RobotSyncState	= 5001;	// Robot 状态同步到RobotMgr

	// http listen 的请求（外部请求）
	MI_HttpBegin         = 10000;
	MI_HttpInnerResponse = 10001; // 响应数据
	MI_HttpRequestBad    = 10002;
	MI_HttpRequestLogin	 = 10003;

	MI_HttpEnd           = 10499;

	// http connector 的消息（内部请求，外部返回）
	MI_HttpOuterRequest      = 10500; // 内部向外请求
	MI_HttpOuterResponse     = 10501; // 外部响应数据

	// cmd
	MI_CmdThread        = 20001;
	MI_CmdApp           = 20002;
}
